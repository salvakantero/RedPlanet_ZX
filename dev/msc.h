// msc.h
// Generado por Mojon Script Compiler de la Churrera
// Copyleft 2011 The Mojon Twins
 
// Script data & pointers
extern unsigned char mscce_0 [];
extern unsigned char mscce_1 [];
extern unsigned char mscce_2 [];
extern unsigned char mscce_3 [];
extern unsigned char mscce_4 [];
extern unsigned char mscce_5 [];
extern unsigned char mscce_6 [];
extern unsigned char mscce_7 [];
extern unsigned char mscce_8 [];
extern unsigned char mscce_9 [];
extern unsigned char mscce_10 [];
extern unsigned char mscce_11 [];
extern unsigned char mscce_12 [];
extern unsigned char mscce_13 [];
extern unsigned char mscce_14 [];
extern unsigned char mscce_15 [];
extern unsigned char mscce_16 [];
extern unsigned char mscce_17 [];
extern unsigned char mscce_18 [];
extern unsigned char mscce_19 [];
extern unsigned char mscce_20 [];
extern unsigned char mscce_21 [];
extern unsigned char mscce_22 [];
extern unsigned char mscce_23 [];
extern unsigned char mscce_24 [];
extern unsigned char mscce_25 [];
extern unsigned char mscce_26 [];
extern unsigned char mscce_27 [];
extern unsigned char mscce_28 [];
extern unsigned char mscce_29 [];
extern unsigned char mscce_30 [];
extern unsigned char msccf_0 [];
extern unsigned char msccf_1 [];
 
unsigned char *e_scripts [] = {
    mscce_1, mscce_2, mscce_3, mscce_4, mscce_5, mscce_6, mscce_7, mscce_8, mscce_9, mscce_10, mscce_11, mscce_12, mscce_13, mscce_14, mscce_15, mscce_16, mscce_17, mscce_18, mscce_19, mscce_20, mscce_21, mscce_22, mscce_23, mscce_24, mscce_25, mscce_26, mscce_27, mscce_28, mscce_29, mscce_30, mscce_0, 0, 0
};
 
unsigned char *f_scripts [] = {
    msccf_0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, msccf_1, 0, 0, 0
};
 
#asm
._mscce_0

    defb 0x06, 0xF0, 0xFF, 0x01, 0x02, 0x00, 0xFF, 0xFF

._mscce_1

    defb 0x63, 0xF0, 0xFF, 0xE3, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x23, 0x2F, 0x2E, 0x34
    defb 0x32, 0x2F, 0x2C, 0x00, 0x23, 0x25, 0x2E, 0x34, 0x25, 0x32, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01
    defb 0x01, 0x01, 0xEE, 0x20, 0x0C, 0x01, 0x1E, 0x20, 0x04, 0x01, 0x1E, 0x20, 0x04, 0x07, 0x19, 0x20
    defb 0x05, 0x07, 0x17, 0x20, 0x06, 0x07, 0x19, 0x20, 0x04, 0x06, 0x16, 0x20, 0x05, 0x06, 0x18, 0x20
    defb 0x06, 0x06, 0x1A, 0x20, 0x0C, 0x07, 0x19, 0x20, 0x0D, 0x07, 0x17, 0x20, 0x0C, 0x06, 0x16, 0x20
    defb 0x0D, 0x06, 0x18, 0x20, 0x06, 0x03, 0x18, 0x20, 0x07, 0x03, 0x17, 0x20, 0x07, 0x02, 0x1A, 0x20
    defb 0x00, 0x07, 0x1C, 0xFF, 0xFF

._mscce_2

    defb 0x43, 0xF0, 0xFF, 0xE3, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x33, 0x35, 0x30, 0x30
    defb 0x2C, 0x39, 0x00, 0x24, 0x25, 0x30, 0x2F, 0x34, 0x00, 0x11, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01
    defb 0x01, 0x01, 0xEE, 0x20, 0x07, 0x01, 0x1E, 0x20, 0x02, 0x07, 0x1F, 0x20, 0x03, 0x07, 0x1F, 0x20
    defb 0x04, 0x07, 0x1F, 0x20, 0x03, 0x06, 0x1F, 0x20, 0x0A, 0x07, 0x1F, 0x20, 0x0B, 0x07, 0x1F, 0x20
    defb 0x0B, 0x06, 0x1F, 0xFF, 0xFF

._mscce_3

    defb 0x23, 0xF0, 0xFF, 0xE3, 0x01, 0x01, 0x01, 0x01, 0x00, 0x23, 0x25, 0x2E, 0x34, 0x32, 0x21, 0x2C
    defb 0x00, 0x28, 0x21, 0x2C, 0x2C, 0x00, 0x2C, 0x25, 0x36, 0x25, 0x2C, 0x00, 0x10, 0x00, 0x01, 0x01
    defb 0x01, 0x01, 0xEE, 0xFF, 0xFF

._mscce_4

    defb 0x5B, 0xF0, 0xFF, 0xE3, 0x01, 0x01, 0x01, 0x00, 0x34, 0x2F, 0x38, 0x29, 0x23, 0x00, 0x37, 0x21
    defb 0x33, 0x34, 0x25, 0x00, 0x33, 0x34, 0x2F, 0x32, 0x21, 0x27, 0x25, 0x00, 0x11, 0x21, 0x00, 0x01
    defb 0x01, 0x01, 0xEE, 0x20, 0x06, 0x01, 0x1E, 0x20, 0x05, 0x03, 0x1D, 0x20, 0x06, 0x03, 0x1D, 0x20
    defb 0x08, 0x03, 0x1D, 0x20, 0x08, 0x07, 0x1D, 0x20, 0x09, 0x07, 0x1D, 0x20, 0x09, 0x06, 0x1D, 0x20
    defb 0x0A, 0x07, 0x1D, 0x20, 0x05, 0x07, 0x1D, 0x20, 0x04, 0x07, 0x1B, 0x20, 0x0C, 0x07, 0x19, 0x20
    defb 0x0D, 0x07, 0x17, 0x20, 0x0C, 0x06, 0x16, 0x20, 0x0D, 0x06, 0x18, 0xFF, 0xFF

._mscce_5

    defb 0x2F, 0xF0, 0xFF, 0xE3, 0x01, 0x01, 0x01, 0x00, 0x34, 0x2F, 0x38, 0x29, 0x23, 0x00, 0x37, 0x21
    defb 0x33, 0x34, 0x25, 0x00, 0x33, 0x34, 0x2F, 0x32, 0x21, 0x27, 0x25, 0x00, 0x11, 0x22, 0x00, 0x01
    defb 0x01, 0x01, 0xEE, 0x20, 0x01, 0x07, 0x1D, 0x20, 0x02, 0x07, 0x1D, 0x20, 0x01, 0x06, 0x1D, 0xFF
    defb 0xFF

._mscce_6

    defb 0x2B, 0xF0, 0xFF, 0xE3, 0x01, 0x01, 0x01, 0x00, 0x37, 0x25, 0x33, 0x34, 0x00, 0x30, 0x21, 0x33
    defb 0x33, 0x21, 0x27, 0x25, 0x00, 0x00, 0x2C, 0x25, 0x36, 0x25, 0x2C, 0x00, 0x0D, 0x11, 0x00, 0x01
    defb 0x01, 0x01, 0xEE, 0x20, 0x03, 0x08, 0x1B, 0x20, 0x04, 0x08, 0x1D, 0xFF, 0xFF

._mscce_7

    defb 0x2B, 0xF0, 0xFF, 0xE3, 0x01, 0x01, 0x00, 0x21, 0x23, 0x23, 0x25, 0x33, 0x33, 0x00, 0x34, 0x2F
    defb 0x00, 0x37, 0x25, 0x33, 0x34, 0x00, 0x30, 0x21, 0x33, 0x33, 0x21, 0x27, 0x25, 0x33, 0x00, 0x01
    defb 0x01, 0x01, 0xEE, 0x20, 0x0B, 0x01, 0x1E, 0x20, 0x08, 0x05, 0x1F, 0xFF, 0xFF

._mscce_8

    defb 0x23, 0xF0, 0xFF, 0xE3, 0x01, 0x01, 0x01, 0x00, 0x23, 0x25, 0x2E, 0x34, 0x32, 0x21, 0x2C, 0x00
    defb 0x28, 0x21, 0x2C, 0x2C, 0x00, 0x00, 0x2C, 0x25, 0x36, 0x25, 0x2C, 0x00, 0x0D, 0x11, 0x00, 0x01
    defb 0x01, 0x01, 0xEE, 0xFF, 0xFF

._mscce_9

    defb 0x27, 0xF0, 0xFF, 0xE3, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x21, 0x23, 0x23, 0x25, 0x33, 0x33
    defb 0x00, 0x34, 0x2F, 0x00, 0x24, 0x35, 0x2E, 0x27, 0x25, 0x2F, 0x2E, 0x33, 0x00, 0x01, 0x01, 0x01
    defb 0x01, 0x01, 0xEE, 0x20, 0x06, 0x02, 0x1B, 0xFF, 0xFF

._mscce_10

    defb 0x33, 0xF0, 0xFF, 0xE3, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x24
    defb 0x35, 0x2E, 0x27, 0x25, 0x2F, 0x2E, 0x33, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01
    defb 0x01, 0x01, 0xEE, 0x20, 0x02, 0x08, 0x1B, 0x20, 0x06, 0x06, 0x1B, 0x20, 0x0D, 0x02, 0x1B, 0x20
    defb 0x0A, 0x08, 0x1B, 0xFF, 0xFF

._mscce_11

    defb 0x2B, 0xF0, 0xFF, 0xE3, 0x01, 0x01, 0x01, 0x00, 0x37, 0x25, 0x33, 0x34, 0x00, 0x30, 0x21, 0x33
    defb 0x33, 0x21, 0x27, 0x25, 0x00, 0x00, 0x2C, 0x25, 0x36, 0x25, 0x2C, 0x00, 0x0D, 0x12, 0x00, 0x01
    defb 0x01, 0x01, 0xEE, 0x20, 0x08, 0x04, 0x1B, 0x20, 0x04, 0x04, 0x1D, 0xFF, 0xFF

._mscce_12

    defb 0x43, 0xF0, 0xFF, 0xE3, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x33, 0x35, 0x30, 0x30
    defb 0x2C, 0x39, 0x00, 0x24, 0x25, 0x30, 0x2F, 0x34, 0x00, 0x12, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01
    defb 0x01, 0x01, 0xEE, 0x20, 0x04, 0x01, 0x1F, 0x20, 0x0A, 0x01, 0x1F, 0x20, 0x0B, 0x01, 0x1F, 0x20
    defb 0x08, 0x03, 0x1F, 0x20, 0x0A, 0x03, 0x1F, 0x20, 0x04, 0x05, 0x1F, 0x20, 0x08, 0x05, 0x1F, 0x20
    defb 0x05, 0x05, 0x1F, 0xFF, 0xFF

._mscce_13

    defb 0x23, 0xF0, 0xFF, 0xE3, 0x01, 0x01, 0x01, 0x00, 0x23, 0x25, 0x2E, 0x34, 0x32, 0x21, 0x2C, 0x00
    defb 0x28, 0x21, 0x2C, 0x2C, 0x00, 0x00, 0x2C, 0x25, 0x36, 0x25, 0x2C, 0x00, 0x0D, 0x12, 0x00, 0x01
    defb 0x01, 0x01, 0xEE, 0xFF, 0xFF

._mscce_14

    defb 0x23, 0xF0, 0xFF, 0xE3, 0x01, 0x01, 0x00, 0x21, 0x23, 0x23, 0x25, 0x33, 0x33, 0x00, 0x34, 0x2F
    defb 0x00, 0x33, 0x2F, 0x35, 0x34, 0x28, 0x25, 0x21, 0x33, 0x34, 0x00, 0x25, 0x38, 0x29, 0x34, 0x00
    defb 0x01, 0x01, 0xEE, 0xFF, 0xFF

._mscce_15

    defb 0x23, 0xF0, 0xFF, 0xE3, 0x01, 0x01, 0x01, 0x01, 0x00, 0x25, 0x38, 0x29, 0x34, 0x00, 0x34, 0x2F
    defb 0x00, 0x35, 0x2E, 0x24, 0x25, 0x32, 0x27, 0x32, 0x2F, 0x35, 0x2E, 0x24, 0x00, 0x01, 0x01, 0x01
    defb 0x01, 0x01, 0xEE, 0xFF, 0xFF

._mscce_16

    defb 0x23, 0xF0, 0xFF, 0xE3, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x30, 0x25, 0x2C, 0x35
    defb 0x33, 0x2F, 0x29, 0x24, 0x33, 0x00, 0x2C, 0x21, 0x29, 0x32, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01
    defb 0x01, 0x01, 0xEE, 0xFF, 0xFF

._mscce_17

    defb 0x23, 0xF0, 0xFF, 0xE3, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x21, 0x2C, 0x36, 0x21, 0x32
    defb 0x29, 0x34, 0x2F, 0x33, 0x00, 0x27, 0x32, 0x2F, 0x34, 0x34, 0x2F, 0x00, 0x01, 0x01, 0x01, 0x01
    defb 0x01, 0x01, 0xEE, 0xFF, 0xFF

._mscce_18

    defb 0x23, 0xF0, 0xFF, 0xE3, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x21, 0x2C, 0x36, 0x21, 0x32
    defb 0x29, 0x34, 0x2F, 0x33, 0x00, 0x27, 0x32, 0x2F, 0x34, 0x34, 0x2F, 0x00, 0x01, 0x01, 0x01, 0x01
    defb 0x01, 0x01, 0xEE, 0xFF, 0xFF

._mscce_19

    defb 0x3F, 0xF0, 0xFF, 0xE3, 0x01, 0x01, 0x01, 0x00, 0x34, 0x2F, 0x38, 0x29, 0x23, 0x00, 0x37, 0x21
    defb 0x33, 0x34, 0x25, 0x00, 0x33, 0x34, 0x2F, 0x32, 0x21, 0x27, 0x25, 0x00, 0x12, 0x21, 0x00, 0x01
    defb 0x01, 0x01, 0xEE, 0x20, 0x05, 0x02, 0x1D, 0x20, 0x08, 0x02, 0x1D, 0x20, 0x08, 0x04, 0x1D, 0x20
    defb 0x06, 0x04, 0x1D, 0x20, 0x05, 0x06, 0x1D, 0x20, 0x07, 0x06, 0x1D, 0x20, 0x0C, 0x06, 0x1D, 0xFF
    defb 0xFF

._mscce_20

    defb 0x23, 0xF0, 0xFF, 0xE3, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x35, 0x2E, 0x24, 0x25, 0x32, 0x27
    defb 0x32, 0x2F, 0x35, 0x2E, 0x24, 0x00, 0x34, 0x35, 0x2E, 0x2E, 0x25, 0x2C, 0x00, 0x01, 0x01, 0x01
    defb 0x01, 0x01, 0xEE, 0xFF, 0xFF

._mscce_21

    defb 0x23, 0xF0, 0xFF, 0xE3, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x33, 0x29, 0x24, 0x25, 0x00, 0x28
    defb 0x21, 0x2C, 0x2C, 0x00, 0x2C, 0x25, 0x36, 0x25, 0x2C, 0x00, 0x0D, 0x14, 0x00, 0x01, 0x01, 0x01
    defb 0x01, 0x01, 0xEE, 0xFF, 0xFF

._mscce_22

    defb 0x23, 0xF0, 0xFF, 0xE3, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x21, 0x32, 0x21, 0x23, 0x2E
    defb 0x2F, 0x36, 0x29, 0x32, 0x35, 0x33, 0x00, 0x2C, 0x21, 0x29, 0x32, 0x00, 0x01, 0x01, 0x01, 0x01
    defb 0x01, 0x01, 0xEE, 0xFF, 0xFF

._mscce_23

    defb 0x23, 0xF0, 0xFF, 0xE3, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x35, 0x2E, 0x33, 0x34, 0x21, 0x22
    defb 0x2C, 0x25, 0x00, 0x23, 0x2F, 0x32, 0x32, 0x29, 0x24, 0x2F, 0x32, 0x33, 0x00, 0x01, 0x01, 0x01
    defb 0x01, 0x01, 0xEE, 0xFF, 0xFF

._mscce_24

    defb 0x23, 0xF0, 0xFF, 0xE3, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x35, 0x2E, 0x33, 0x34, 0x21, 0x22
    defb 0x2C, 0x25, 0x00, 0x23, 0x2F, 0x32, 0x32, 0x29, 0x24, 0x2F, 0x32, 0x33, 0x00, 0x01, 0x01, 0x01
    defb 0x01, 0x01, 0xEE, 0xFF, 0xFF

._mscce_25

    defb 0x3B, 0xF0, 0xFF, 0xE3, 0x01, 0x01, 0x01, 0x00, 0x34, 0x2F, 0x38, 0x29, 0x23, 0x00, 0x37, 0x21
    defb 0x33, 0x34, 0x25, 0x00, 0x33, 0x34, 0x2F, 0x32, 0x21, 0x27, 0x25, 0x00, 0x12, 0x22, 0x00, 0x01
    defb 0x01, 0x01, 0xEE, 0x20, 0x06, 0x04, 0x1B, 0x20, 0x04, 0x04, 0x1D, 0x20, 0x07, 0x03, 0x1D, 0x20
    defb 0x07, 0x04, 0x1D, 0x20, 0x08, 0x04, 0x1D, 0x20, 0x09, 0x04, 0x1D, 0xFF, 0xFF

._mscce_26

    defb 0x23, 0xF0, 0xFF, 0xE3, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x33, 0x29, 0x24, 0x25, 0x00, 0x28
    defb 0x21, 0x2C, 0x2C, 0x00, 0x2C, 0x25, 0x36, 0x25, 0x2C, 0x00, 0x0D, 0x15, 0x00, 0x01, 0x01, 0x01
    defb 0x01, 0x01, 0xEE, 0xFF, 0xFF

._mscce_27

    defb 0x23, 0xF0, 0xFF, 0xE3, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x21, 0x22, 0x21, 0x2E
    defb 0x24, 0x2F, 0x2E, 0x25, 0x24, 0x00, 0x2D, 0x29, 0x2E, 0x25, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01
    defb 0x01, 0x01, 0xEE, 0xFF, 0xFF

._mscce_28

    defb 0x23, 0xF0, 0xFF, 0xE3, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x21, 0x22, 0x21, 0x2E
    defb 0x24, 0x2F, 0x2E, 0x25, 0x24, 0x00, 0x2D, 0x29, 0x2E, 0x25, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01
    defb 0x01, 0x01, 0xEE, 0xFF, 0xFF

._mscce_29

    defb 0x23, 0xF0, 0xFF, 0xE3, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x21, 0x22, 0x21, 0x2E
    defb 0x24, 0x2F, 0x2E, 0x25, 0x24, 0x00, 0x2D, 0x29, 0x2E, 0x25, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01
    defb 0x01, 0x01, 0xEE, 0xFF, 0xFF

._mscce_30

    defb 0x25, 0x10, 0x02, 0x00, 0xFF, 0xE3, 0x01, 0x01, 0x01, 0x01, 0x00, 0x25, 0x38, 0x30, 0x2C, 0x2F
    defb 0x33, 0x29, 0x36, 0x25, 0x33, 0x00, 0x33, 0x34, 0x2F, 0x23, 0x2B, 0x30, 0x29, 0x2C, 0x25, 0x00
    defb 0x01, 0x01, 0x01, 0x01, 0xEE, 0xFF, 0x4D, 0x10, 0x02, 0x01, 0xFF, 0xE3, 0x01, 0x01, 0x01, 0x00
    defb 0x22, 0x21, 0x23, 0x2B, 0x00, 0x34, 0x2F, 0x00, 0x23, 0x2F, 0x2E, 0x34, 0x32, 0x2F, 0x2C, 0x00
    defb 0x23, 0x25, 0x2E, 0x34, 0x25, 0x32, 0x00, 0x01, 0x01, 0x01, 0xEE, 0x20, 0x06, 0x05, 0x11, 0x20
    defb 0x07, 0x05, 0x11, 0x20, 0x08, 0x05, 0x11, 0x20, 0x09, 0x05, 0x11, 0x20, 0x0A, 0x05, 0x11, 0x20
    defb 0x06, 0x06, 0x11, 0x20, 0x07, 0x06, 0x11, 0x20, 0x08, 0x06, 0x11, 0x20, 0x09, 0x06, 0x11, 0x20
    defb 0x0A, 0x06, 0x11, 0xFF, 0xFF

._msccf_0

    defb 0x0C, 0x21, 0x01, 0x1F, 0x22, 0x61, 0x7F, 0x10, 0x02, 0x01, 0xFF, 0xF1, 0xFF, 0xFF

._msccf_1

    defb 0x5C, 0x21, 0x51, 0xAF, 0x22, 0x51, 0x6F, 0x41, 0x0A, 0x10, 0x02, 0x00, 0xFF, 0x20, 0x06, 0x05
    defb 0x11, 0x20, 0x07, 0x05, 0x11, 0x20, 0x08, 0x05, 0x11, 0x20, 0x09, 0x05, 0x11, 0x20, 0x0A, 0x05
    defb 0x11, 0x20, 0x06, 0x06, 0x11, 0x20, 0x07, 0x06, 0x11, 0x20, 0x08, 0x06, 0x11, 0x20, 0x09, 0x06
    defb 0x11, 0x20, 0x0A, 0x06, 0x11, 0xE0, 0x09, 0xE0, 0x08, 0xE3, 0x01, 0x01, 0x01, 0x00, 0x22, 0x21
    defb 0x23, 0x2B, 0x00, 0x34, 0x2F, 0x00, 0x23, 0x2F, 0x2E, 0x34, 0x32, 0x2F, 0x2C, 0x00, 0x23, 0x25
    defb 0x2E, 0x34, 0x25, 0x32, 0x00, 0x01, 0x01, 0x01, 0xEE, 0x01, 0x02, 0x01, 0xFF, 0xFF

#endasm
 
unsigned char *script;
 
void msc_init_all (void) {
    unsigned char i;
    for (i = 0; i < MAX_FLAGS; i ++)
        flags [i] = 0;
}
 
unsigned char read_byte (void) {
    unsigned char c;
    c = script [0];
    script ++;
    return c;
}
 
unsigned char read_vbyte (void) {
    unsigned char c;
    c = read_byte ();
    if (c & 128) return flags [c & 127];
    return c;
}
 
// Ejecutamos el script apuntado por *script:
void run_script (void) {
    unsigned char terminado = 0;
    unsigned char continuar = 0;
    unsigned char x, y, n, m, c;
    unsigned char *next_script;
 
    if (script == 0)
        return; 
 
    script_something_done = 0;
 
    while (1) {
        c = read_byte ();
        if (c == 0xFF) break;
        next_script = script + c;
        terminado = continuar = 0;
        while (!terminado) {
            c = read_byte ();
            switch (c) {
                case 0x10:
                    // IF FLAG x = n
                    // Opcode: 10 x n
                    x = read_vbyte ();
                    n = read_vbyte ();
                    terminado = (flags [x] != n);
                    break;
                case 0x21:
                    // IF PLAYER_IN_X x1, x2
                    // Opcode: 21 x1 x2
                    x = read_byte ();
                    y = read_byte ();
                    terminado = (!((player.x >> 6) >= x && (player.x >> 6) <= y));
                    break;
                case 0x22:
                    // IF PLAYER_IN_Y y1, y2
                    // Opcode: 22 y1 y2
                    x = read_byte ();
                    y = read_byte ();
                    terminado = (!((player.y >> 6) >= x && (player.y >> 6) <= y));
                    break;
                case 0x41:
                     // IF OBJECT_COUNT = n
                     // Opcode: 41 n
                     n = read_vbyte ();
                     terminado = (player.objs != n);
                     break;
                case 0xF0:
                     // IF TRUE
                     // Opcode: F0
                     break;
                case 0xFF:
                    // THEN
                    // Opcode: FF
                    terminado = 1;
                    continuar = 1;
                    script_something_done = 1;
                    break;
            }
        }
        if (continuar) {
            terminado = 0;
            while (!terminado) {
                c = read_byte ();
                switch (c) {
                    case 0x01:
                        // SET FLAG x = n
                        // Opcode: 01 x n
                        x = read_vbyte ();
                        n = read_vbyte ();
                        flags [x] = n;
                        break;
                    case 0x20:
                        // SET TILE (x, y) = n
                        // Opcode: 20 x y n
                        x = read_vbyte ();
                        y = read_vbyte ();
                        n = read_vbyte ();
                        map_buff [x + (y << 4) - y] = n;
                        map_attr [x + (y << 4) - y] = comportamiento_tiles [n];
                        draw_coloured_tile (VIEWPORT_X + x + x, VIEWPORT_Y + y + y, n);
                        break;
                    case 0xE0:
                        // SOUND n
                        // Opcode: E0 n
                        n = read_vbyte ();
#ifdef MODE_128K
                        wyz_play_sound (n);
#else
                        peta_el_beeper (n);
#endif
                        break;
                    case 0xE3:
                        x = 0;
                        while (1) {
                           n = read_byte ();
                           if (n == 0xEE) break;
                           sp_PrintAtInv (LINE_OF_TEXT, LINE_OF_TEXT_X + x, LINE_OF_TEXT_ATTR, n);
                           x ++;
                        }
                        break;
                    case 0xF1:
                        script_result = 1;
                        terminado = 1;
                        break;
                    case 0xFF:
                        terminado = 1;
                        break;
                }
            }
        }
        script = next_script;
    }
    if (script_result == 3) {
        script_result = 0;
        draw_scr ();
    }
}
